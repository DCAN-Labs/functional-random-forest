function BOMDPlot(varargin)
%BOMDPlot implements the boxplot code generated by Oscar Miranda Dominguez 
%BOMDPlot is used to plot performance for groups. ALL arguments are
%optional and can be specified in ANY order.
%   Usage: BOMDPlot('InputData',data_matrix,...,'ColorData',[1 0 0; 0 0 1],
%   'OutputDirectory','/path/to/directory','ThinLineThreshold', [2.5 97.5],
%   'ThickLineThreshold,[25 75], 'FigureTitle','accuracy plot',
%   'AxisFont',9,'TitleFont',10,'LegendFont',8,'PlotTitle',
%   {'Total','Sensitivty','Specificity'},'PValues',[0.001 0.001 0.001],
%   'FigWidth',8,'FigHeight',6, 'TopMargin',0.2,'LeftMargin',0.1,
%   'RightMargin',0.05,'BetweenHorz',0.1,'BetweenVert',0.12,'XRange',
%   [0.5 2.5],'GrayLine',[0 0 0],'Delta',0);
%   
%   INPUTS should be provided in pairs separate by commas. The first item 
%   in the pair denotes the input type, the second item denotes the value.
%   Below are a list of input pairs:
%
%   'InputData',data_matrix -- the input data to compute boxplots. 
%   data_matrix is a 2-dimensional numeric matrix, where the rows represent
%   data types (e.g. specifity, sensitivity, R squared, MEA) and the
%   columns represent cases. Critically, if one wants to create nested
%   boxplots, one can specify additional paired inputs (i.e. include a
%   second or even third pair of data). The additional inputs should have
%   the same number of rows in the same order. Alternatively, the input
%   data can be a cell matrix, where each cell represents a nested
%   2-dimensional numeric matrix.
%
%   'ColorData',[1 0 0; 0 0 1] -- color_matrix denotes a Mx3 numeric matrix
%   where the number of rows corresponds to the number of 'InputData' pairs
%   specified. The columns refer to the RGB format for matrices.
%   'OutputDirectory','/path_to_directory' -- the path to where the graphs
%   will be saved and stored. If unspecified, the default will be the
%   present working directory
%
%   'ThinLineThreshold',[2.5 97.5] -- the tails for the thin part of each
%   boxplot. Default is the 2.5 percent tails
%
%   'ThickLineThreshold',[25 75] -- the tails for the thicker part of each
%   boxplot. Default is the quartile (25/75 percent) tails
%
%   'FigureTitle','accuracy_plot' -- the title for the overall figure
%
%   'AxisFont',9 -- the font size for the axes
%
%   'TitleFont',10 -- the font size for the titles
%
%   'LegendFont',8 -- the font size for the legends (e.g. p-values)
%       
%   'PlotTitle',{'Total','Sensitivty','Specificity'} -- a cell array of size Nx1 where N is the 
%   number of rows plotted. If specified will place a title for each set of
%   nested boxplots. Default will leave this blank.
%
%   'PValues','[0.001 0.001 0.001] -- a numeric array of size Nx1 where N is the
%   number of rows plotted. If specified will place a number for each set
%   of nested boxplots. Helpful for depicting statistics. Default will
%   leave this blank.
%
%   'FigWidth',8 -- The width of the figure when printed, specified in cm
%
%   'FigHeight',6 -- The height of the figure when printed, specified in cm
%
%   'TopMargin',0.2 -- The space at the top of the figure, specified in cm
%
%   'BottomMargin,0 -- The space at the bottom of the figure, specified in
%   cm
%
%   'LeftMargin',0.1 -- The space to the left of the figure, specified in
%   cm
%
%   'RightMargin',0.05 -- The space to the right of the figure, specified 
%   in cm 
%
%   'BetweenHorz',0.1 -- The space between sets of boxplots, specfied in cm
%
%   'BetweenVert',0.12 -- The space between margins, specified in cm
%
%   'XRange',[.5 2.5] -- The range depicted for the x-axis on the graph,
%   not recommended to change
%
%   'GrayLine',[0 0 0] -- The color for the gray line. Not recommend to
%   change
%
%   'Delta',0 -- The delta value, not recommended to change.
%
%
% Generated by Eric Feczko on 11/13/17 -- modified from Tightplot.m, 
% scratch_figure_WIN_fixed517017.m 

%set defaults and load inputs
OutputDirectory='./';
ThinLineThreshold=[2.5 97.5];
ThickLineThreshold=[25 75];
AxisFont=9;
TitleFont=10;
LegendFont=8;
FigWidth=4;
FigHeight=3;
TopMargin=0.1;
BottomMargin=0.13;
LeftMargin=0.1;
RightMargin=0.05;
BetweenHorz=0.1;
BetweenVert=0.12;
Ninputs = 0;
gray_line=[1 1 1]*0;
FigureTitle='the nameless one';
PlotTitle={'Adahn'};
delta=0;
ThinLineWidth=3;
ThickLineWidth=6;
YRange = [0 1];
LegendNames={'observed','permuted'};
for i = 1:size(varargin,2)
    if ischar(varargin{i})
        switch(varargin{i})
            case('InputData')
                if isnumeric(varargin{i+1})
                    Ninputs=Ninputs+1;
                    InputData{Ninputs,1} = varargin{i+1};
                else
                    cell_inputs = varargin{i+1};
                    for iter = 1:length(cell_inputs)
                        if isnumeric(cell_inputs{iter})
                            Ninputs=Ninputs+1;                            
                            InputData{Ninputs,1} = cell_inputs{iter};
                        else
                            cell_inputs_within_inputs = cell_inputs{iter};
                            for iter_within_iter = 1:length(cell_inputs_within_inputs)
                                if isnumeric(cell_inputs_within_inputs{iter_within_iter})
                                    Ninputs = Ninputs+1;                                
                                    InputData{Ninputs,1} = cell_inputs_within_inputs{iter_within_iter};
                                else
                                    cell_inputs_within_inputs_within_inputs = cell_inputs_within_inputs{iter_within_iter};
                                    for iter_within_iter_within_iter = 1:length(cell_inputs_within_inputs_within_inputs)
                                        Ninputs = Ninputs+1;
                                        InputData{Ninputs,1} = cell_inputs_within_inputs_within_inputs{iter_within_iter_within_iter};
                                    end
                                end
                            end
                        end
                    end
                end
            case('ColorData')
                ColorData = varargin{i+1};
            case('OutputDirectory')
                OutputDirectory = varargin{i+1};
            case('ThinLineThreshold')
                ThinLineThreshold = varargin{i+1};
            case('ThickLineThreshold')
                ThickLineThreshold = varargin{i+1};
            case('FigureTitle')
                FigureTitle = varargin{i+1};
            case('AxisFont')
                AxisFont = varargin{i+1};
            case('TitleFont')
                TitleFont = varargin{i+1};
            case('LegendFont')
                LegendFont = varargin{i+1};
            case('PlotTitle')
                PlotTitle = varargin{i+1};
            case('PValues')
                PValues = varargin{i+1};
            case('FigWidth')
                FigWidth = varargin{i+1};
            case('FigHeight')
                FigHeight = varargin{i+1};
            case('TopMargin')
                TopMargin = varargin{i+1};
            case('BottomMargin')
                BottomMargin = varargin{i+1};
            case('LeftMargin')
                LeftMargin = varargin{i+1};
            case('RightMargin')
                RightMargin = varargin{i+1};
            case('BetweenHorz')
                BetweenHorz = varargin{i+1};
            case('BetweenVert')
                BetweenVert = varargin{i+1};
            case('XRange')
                XRange = varargin{i+1};
            case('GrayLine')
                gray_line = varargin{i+1};
            case('Delta')
                delta = varargin{i+1};
            case('ThinLineWidth')
                ThinLineWidth = varargin{i+1};
            case('ThickLineWidth')
                ThickLineWidth = varargin{i+1};
            case('YRange')
                YRange = varargin{i+1};
            case('LegendNames')
                LegendNames = varargin{i+1};
        end
    end
end
% declare and calculate initial thresholds
if exist('XRange','var') == 0
    XRange = [.5 .5+Ninputs];
end
y_t = cell(Ninputs,1);
y_T = y_t;
m_data = y_t;
for iter = 1:Ninputs
    if size(size(InputData{iter}),2) == 3
        old_data = InputData{iter};
        reshaped_data = [ old_data(:,:,1) old_data(:,:,2) old_data(:,:,3) ];
        InputData{iter} = reshaped_data;
    end
    if size(InputData{iter},1) == 1
        y_t{iter,1} = prctile(InputData{iter}.',ThinLineThreshold)';
        y_T{iter,1} = prctile(InputData{iter}.',ThickLineThreshold)';        
    else
        y_t{iter,1} = prctile(InputData{iter}.',ThinLineThreshold);
        y_T{iter,1} = prctile(InputData{iter}.',ThickLineThreshold);
    end
    m_data{iter,1} = mean(InputData{iter}.');
end
%for when NInputs is 1, Y_t and y_t will be flipped. This will unflip them
% make figure template
fig_size=[8 1 FigWidth FigHeight];
H = figure('Visible','on',...
    'Units','centimeters',...
    'name',FigureTitle,...
    'PaperPosition',fig_size,...
    'Position',fig_size);
set(gcf,'Color',[1 1 1],...
    'DefaultAxesLineWidth',1,...
    'DefaultAxesFontSize',AxisFont)
% check if color matrix exists, if not generate a default
if exist('ColorData','var') == 0
    if Ninputs > 5
        ColorData = repmat([0 0 1; 1 0 0; 0.5 0.5 0; 0.1 0.4 0.5; 0 0 0],ceil(Ninputs/5),1);
    else
        ColorData = [0 0 1; 1 0 0; 0.5 0.5 0; 0.1 0.4 0.5; 0 0 0];
    end
end
%cycle through charts
NCharts = size(InputData{1},1);
if exist('PValues','var') == 0
    PValues = zeros(NCharts,1) + NaN;
end
ylim([(YRange(1) - range(YRange)*0.2) YRange(2)+0.2+range(YRange)*0.3])
MidY = YRange(1) + range(YRange)/2;
if YRange(1) == 0 && YRange(2) == 1
    str_multi=100;
else
    str_multi=1;
end
for curr_chart = 1:NCharts
    tightplot(1,NCharts,curr_chart,'BottomSpace',BottomMargin,...
        'TopSpace',TopMargin,...
        'LeftSpace',LeftMargin,...
        'RightSpace',RightMargin,...
        'BetweenH',BetweenHorz,...
        'BetweenV',BetweenVert);
    plot(1,m_data{1}(curr_chart),'k.');
    hold all
    line([1 1],y_t{1}(:,curr_chart),...
        'linewidth',ThinLineWidth,'color',ColorData(1,:))
ylim([(YRange(1) - range(YRange)*0.2) YRange(2)+0.2+range(YRange)*0.3])
MidY = YRange(1) + range(YRange)/2;
    line([1 1],y_T{1}(:,curr_chart),...
        'linewidth',ThickLineWidth,'color',ColorData(1,:))    
    plot(1,m_data{1}(curr_chart),'o','markeredgecolor',ColorData(1,:),'MarkerFaceColor','w','markersize',8);
    text(1.2,m_data{1}(curr_chart),num2str(str_multi*m_data{1}(curr_chart),'%4.0f'),...
        'VerticalAlignment','middle','fontsize',AxisFont)
    if Ninputs > 1
        for curr_plot = 2:Ninputs
            plot(curr_plot,m_data{curr_plot}(curr_chart),'k.');
            line([curr_plot curr_plot],y_t{curr_plot}(:,curr_chart),...
                'linewidth',ThinLineWidth,'color',ColorData(curr_plot,:))
            line([curr_plot curr_plot],y_T{curr_plot}(:,curr_chart),...
                'linewidth',ThickLineWidth,'color',ColorData(curr_plot,:))    
            plot(curr_plot,m_data{curr_plot}(curr_chart),'o','markeredgecolor',ColorData(curr_plot,:),'MarkerFaceColor','w','markersize',8);
            text(curr_plot + 0.2,m_data{curr_plot}(curr_chart),num2str(str_multi*m_data{curr_plot}(curr_chart),'%4.0f'),...
                'VerticalAlignment','middle','fontsize',AxisFont)
        end
    end
    hold off
    xlim(XRange)
    box off
    axis off
    if curr_chart == 1
        line(XRange([1 1]),YRange,...
            'linewidth',ThinLineWidth,'color',gray_line);
        line([XRange(1)-.1 XRange(1)+.1],[MidY MidY],...
            'linewidth',ThinLineWidth,'color',gray_line);
        text(XRange(1),MidY,num2str(MidY*str_multi,'%2.1f'),...
            'HorizontalAlignment','right',...
            'color',gray_line,...
            'fontsize',LegendFont)
        line([XRange(1)-.1 XRange(1)+.1],[YRange(1) YRange(1)],...
            'linewidth',ThinLineWidth,'color',gray_line);
        text(XRange(1),YRange(1),num2str(YRange(1)*str_multi,'%2.1f'),...
            'HorizontalAlignment','right',...
            'color',gray_line,...
            'fontsize',LegendFont)
        line([XRange(1)-.1 XRange(1)+.1],[YRange(2) YRange(2)],...
            'linewidth',ThinLineWidth,'color',gray_line);
        text(XRange(1),YRange(2),num2str(YRange(2)*str_multi,'%2.1f'),...
            'HorizontalAlignment','right',...
            'color',gray_line,...
            'fontsize',LegendFont)
    end
    if length(PlotTitle) == 1
        title(PlotTitle,'fontsize',TitleFont);
    else
        title(PlotTitle{curr_chart},'fontsize',TitleFont);
    end
    if isnan(PValues(curr_chart)) == 0
        text(mean(XRange),YRange(1)+range(YRange)*0.1,['p < ' num2str(PValues(curr_chart),'%0.3f')],...
            'fontsize',LegendFont,...
            'VerticalAlignment','cap',...
            'HorizontalAlignment','center')
    end

end

for curr_legend = 1:length(LegendNames)
    line([(XRange(1)+((curr_legend-1) * 1)) (XRange(1)+((curr_legend-1)*1)+0.5)],[YRange(2)+range(YRange)*0.2 YRange(2)+range(YRange)*0.2],'linewidth',ThickLineWidth,'color',ColorData(curr_legend,:))
    text((XRange(1)+((curr_legend-1) * 1)),YRange(2)+range(YRange)*0.3,LegendNames{curr_legend},'FontSize',LegendFont)
end
if exist('OutputDirectory','var')
    saveas(H,OutputDirectory,'tif');
end
end

